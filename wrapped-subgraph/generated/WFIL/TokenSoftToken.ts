// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AddressAddedToWhitelist extends ethereum.Event {
  get params(): AddressAddedToWhitelist__Params {
    return new AddressAddedToWhitelist__Params(this);
  }
}

export class AddressAddedToWhitelist__Params {
  _event: AddressAddedToWhitelist;

  constructor(event: AddressAddedToWhitelist) {
    this._event = event;
  }

  get addedAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get whitelist(): i32 {
    return this._event.parameters[1].value.toI32();
  }

  get addedBy(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class AddressRemovedFromWhitelist extends ethereum.Event {
  get params(): AddressRemovedFromWhitelist__Params {
    return new AddressRemovedFromWhitelist__Params(this);
  }
}

export class AddressRemovedFromWhitelist__Params {
  _event: AddressRemovedFromWhitelist;

  constructor(event: AddressRemovedFromWhitelist) {
    this._event = event;
  }

  get removedAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get whitelist(): i32 {
    return this._event.parameters[1].value.toI32();
  }

  get removedBy(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Burn extends ethereum.Event {
  get params(): Burn__Params {
    return new Burn__Params(this);
  }
}

export class Burn__Params {
  _event: Burn;

  constructor(event: Burn) {
    this._event = event;
  }

  get burner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class BurnerAdded extends ethereum.Event {
  get params(): BurnerAdded__Params {
    return new BurnerAdded__Params(this);
  }
}

export class BurnerAdded__Params {
  _event: BurnerAdded;

  constructor(event: BurnerAdded) {
    this._event = event;
  }

  get addedBurner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get addedBy(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class BurnerRemoved extends ethereum.Event {
  get params(): BurnerRemoved__Params {
    return new BurnerRemoved__Params(this);
  }
}

export class BurnerRemoved__Params {
  _event: BurnerRemoved;

  constructor(event: BurnerRemoved) {
    this._event = event;
  }

  get removedBurner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get removedBy(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class CodeAddressUpdated extends ethereum.Event {
  get params(): CodeAddressUpdated__Params {
    return new CodeAddressUpdated__Params(this);
  }
}

export class CodeAddressUpdated__Params {
  _event: CodeAddressUpdated;

  constructor(event: CodeAddressUpdated) {
    this._event = event;
  }

  get newAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Mint extends ethereum.Event {
  get params(): Mint__Params {
    return new Mint__Params(this);
  }
}

export class Mint__Params {
  _event: Mint;

  constructor(event: Mint) {
    this._event = event;
  }

  get minter(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class MinterAdded extends ethereum.Event {
  get params(): MinterAdded__Params {
    return new MinterAdded__Params(this);
  }
}

export class MinterAdded__Params {
  _event: MinterAdded;

  constructor(event: MinterAdded) {
    this._event = event;
  }

  get addedMinter(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get addedBy(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class MinterRemoved extends ethereum.Event {
  get params(): MinterRemoved__Params {
    return new MinterRemoved__Params(this);
  }
}

export class MinterRemoved__Params {
  _event: MinterRemoved;

  constructor(event: MinterRemoved) {
    this._event = event;
  }

  get removedMinter(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get removedBy(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class OutboundWhitelistUpdated extends ethereum.Event {
  get params(): OutboundWhitelistUpdated__Params {
    return new OutboundWhitelistUpdated__Params(this);
  }
}

export class OutboundWhitelistUpdated__Params {
  _event: OutboundWhitelistUpdated;

  constructor(event: OutboundWhitelistUpdated) {
    this._event = event;
  }

  get updatedBy(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get sourceWhitelist(): i32 {
    return this._event.parameters[1].value.toI32();
  }

  get destinationWhitelist(): i32 {
    return this._event.parameters[2].value.toI32();
  }

  get from(): boolean {
    return this._event.parameters[3].value.toBoolean();
  }

  get to(): boolean {
    return this._event.parameters[4].value.toBoolean();
  }
}

export class OwnerAdded extends ethereum.Event {
  get params(): OwnerAdded__Params {
    return new OwnerAdded__Params(this);
  }
}

export class OwnerAdded__Params {
  _event: OwnerAdded;

  constructor(event: OwnerAdded) {
    this._event = event;
  }

  get addedOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get addedBy(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class OwnerRemoved extends ethereum.Event {
  get params(): OwnerRemoved__Params {
    return new OwnerRemoved__Params(this);
  }
}

export class OwnerRemoved__Params {
  _event: OwnerRemoved;

  constructor(event: OwnerRemoved) {
    this._event = event;
  }

  get removedOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get removedBy(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Paused extends ethereum.Event {
  get params(): Paused__Params {
    return new Paused__Params(this);
  }
}

export class Paused__Params {
  _event: Paused;

  constructor(event: Paused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class PauserAdded extends ethereum.Event {
  get params(): PauserAdded__Params {
    return new PauserAdded__Params(this);
  }
}

export class PauserAdded__Params {
  _event: PauserAdded;

  constructor(event: PauserAdded) {
    this._event = event;
  }

  get addedPauser(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get addedBy(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class PauserRemoved extends ethereum.Event {
  get params(): PauserRemoved__Params {
    return new PauserRemoved__Params(this);
  }
}

export class PauserRemoved__Params {
  _event: PauserRemoved;

  constructor(event: PauserRemoved) {
    this._event = event;
  }

  get removedPauser(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get removedBy(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Revoke extends ethereum.Event {
  get params(): Revoke__Params {
    return new Revoke__Params(this);
  }
}

export class Revoke__Params {
  _event: Revoke;

  constructor(event: Revoke) {
    this._event = event;
  }

  get revoker(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class RevokerAdded extends ethereum.Event {
  get params(): RevokerAdded__Params {
    return new RevokerAdded__Params(this);
  }
}

export class RevokerAdded__Params {
  _event: RevokerAdded;

  constructor(event: RevokerAdded) {
    this._event = event;
  }

  get addedRevoker(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get addedBy(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class RevokerRemoved extends ethereum.Event {
  get params(): RevokerRemoved__Params {
    return new RevokerRemoved__Params(this);
  }
}

export class RevokerRemoved__Params {
  _event: RevokerRemoved;

  constructor(event: RevokerRemoved) {
    this._event = event;
  }

  get removedRevoker(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get removedBy(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Unpaused extends ethereum.Event {
  get params(): Unpaused__Params {
    return new Unpaused__Params(this);
  }
}

export class Unpaused__Params {
  _event: Unpaused;

  constructor(event: Unpaused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class WhitelistEnabledUpdated extends ethereum.Event {
  get params(): WhitelistEnabledUpdated__Params {
    return new WhitelistEnabledUpdated__Params(this);
  }
}

export class WhitelistEnabledUpdated__Params {
  _event: WhitelistEnabledUpdated;

  constructor(event: WhitelistEnabledUpdated) {
    this._event = event;
  }

  get updatedBy(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get enabled(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }
}

export class WhitelisterAdded extends ethereum.Event {
  get params(): WhitelisterAdded__Params {
    return new WhitelisterAdded__Params(this);
  }
}

export class WhitelisterAdded__Params {
  _event: WhitelisterAdded;

  constructor(event: WhitelisterAdded) {
    this._event = event;
  }

  get addedWhitelister(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get addedBy(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class WhitelisterRemoved extends ethereum.Event {
  get params(): WhitelisterRemoved__Params {
    return new WhitelisterRemoved__Params(this);
  }
}

export class WhitelisterRemoved__Params {
  _event: WhitelisterRemoved;

  constructor(event: WhitelisterRemoved) {
    this._event = event;
  }

  get removedWhitelister(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get removedBy(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class TokenSoftToken extends ethereum.SmartContract {
  static bind(address: Address): TokenSoftToken {
    return new TokenSoftToken("TokenSoftToken", address);
  }

  FAILURE_NON_WHITELIST(): i32 {
    let result = super.call(
      "FAILURE_NON_WHITELIST",
      "FAILURE_NON_WHITELIST():(uint8)",
      []
    );

    return result[0].toI32();
  }

  try_FAILURE_NON_WHITELIST(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "FAILURE_NON_WHITELIST",
      "FAILURE_NON_WHITELIST():(uint8)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  FAILURE_NON_WHITELIST_MESSAGE(): string {
    let result = super.call(
      "FAILURE_NON_WHITELIST_MESSAGE",
      "FAILURE_NON_WHITELIST_MESSAGE():(string)",
      []
    );

    return result[0].toString();
  }

  try_FAILURE_NON_WHITELIST_MESSAGE(): ethereum.CallResult<string> {
    let result = super.tryCall(
      "FAILURE_NON_WHITELIST_MESSAGE",
      "FAILURE_NON_WHITELIST_MESSAGE():(string)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  FAILURE_PAUSED(): i32 {
    let result = super.call("FAILURE_PAUSED", "FAILURE_PAUSED():(uint8)", []);

    return result[0].toI32();
  }

  try_FAILURE_PAUSED(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "FAILURE_PAUSED",
      "FAILURE_PAUSED():(uint8)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  FAILURE_PAUSED_MESSAGE(): string {
    let result = super.call(
      "FAILURE_PAUSED_MESSAGE",
      "FAILURE_PAUSED_MESSAGE():(string)",
      []
    );

    return result[0].toString();
  }

  try_FAILURE_PAUSED_MESSAGE(): ethereum.CallResult<string> {
    let result = super.tryCall(
      "FAILURE_PAUSED_MESSAGE",
      "FAILURE_PAUSED_MESSAGE():(string)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  SUCCESS_CODE(): i32 {
    let result = super.call("SUCCESS_CODE", "SUCCESS_CODE():(uint8)", []);

    return result[0].toI32();
  }

  try_SUCCESS_CODE(): ethereum.CallResult<i32> {
    let result = super.tryCall("SUCCESS_CODE", "SUCCESS_CODE():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  SUCCESS_MESSAGE(): string {
    let result = super.call(
      "SUCCESS_MESSAGE",
      "SUCCESS_MESSAGE():(string)",
      []
    );

    return result[0].toString();
  }

  try_SUCCESS_MESSAGE(): ethereum.CallResult<string> {
    let result = super.tryCall(
      "SUCCESS_MESSAGE",
      "SUCCESS_MESSAGE():(string)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  UNKNOWN_ERROR(): string {
    let result = super.call("UNKNOWN_ERROR", "UNKNOWN_ERROR():(string)", []);

    return result[0].toString();
  }

  try_UNKNOWN_ERROR(): ethereum.CallResult<string> {
    let result = super.tryCall("UNKNOWN_ERROR", "UNKNOWN_ERROR():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  addressWhitelists(param0: Address): i32 {
    let result = super.call(
      "addressWhitelists",
      "addressWhitelists(address):(uint8)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toI32();
  }

  try_addressWhitelists(param0: Address): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "addressWhitelists",
      "addressWhitelists(address):(uint8)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  allowance(owner: Address, spender: Address): BigInt {
    let result = super.call(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );

    return result[0].toBigInt();
  }

  try_allowance(owner: Address, spender: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  approve(spender: Address, amount: BigInt): boolean {
    let result = super.call("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_approve(spender: Address, amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  balanceOf(account: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  burn(account: Address, amount: BigInt): boolean {
    let result = super.call("burn", "burn(address,uint256):(bool)", [
      ethereum.Value.fromAddress(account),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_burn(account: Address, amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("burn", "burn(address,uint256):(bool)", [
      ethereum.Value.fromAddress(account),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  checkWhitelistAllowed(sender: Address, receiver: Address): boolean {
    let result = super.call(
      "checkWhitelistAllowed",
      "checkWhitelistAllowed(address,address):(bool)",
      [ethereum.Value.fromAddress(sender), ethereum.Value.fromAddress(receiver)]
    );

    return result[0].toBoolean();
  }

  try_checkWhitelistAllowed(
    sender: Address,
    receiver: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "checkWhitelistAllowed",
      "checkWhitelistAllowed(address,address):(bool)",
      [ethereum.Value.fromAddress(sender), ethereum.Value.fromAddress(receiver)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  decimals(): i32 {
    let result = super.call("decimals", "decimals():(uint8)", []);

    return result[0].toI32();
  }

  try_decimals(): ethereum.CallResult<i32> {
    let result = super.tryCall("decimals", "decimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  decreaseAllowance(spender: Address, subtractedValue: BigInt): boolean {
    let result = super.call(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue)
      ]
    );

    return result[0].toBoolean();
  }

  try_decreaseAllowance(
    spender: Address,
    subtractedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  detectTransferRestriction(from: Address, to: Address, param2: BigInt): i32 {
    let result = super.call(
      "detectTransferRestriction",
      "detectTransferRestriction(address,address,uint256):(uint8)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(param2)
      ]
    );

    return result[0].toI32();
  }

  try_detectTransferRestriction(
    from: Address,
    to: Address,
    param2: BigInt
  ): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "detectTransferRestriction",
      "detectTransferRestriction(address,address,uint256):(uint8)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(param2)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  getLogicAddress(): Address {
    let result = super.call(
      "getLogicAddress",
      "getLogicAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getLogicAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getLogicAddress",
      "getLogicAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  increaseAllowance(spender: Address, addedValue: BigInt): boolean {
    let result = super.call(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue)
      ]
    );

    return result[0].toBoolean();
  }

  try_increaseAllowance(
    spender: Address,
    addedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isBurner(account: Address): boolean {
    let result = super.call("isBurner", "isBurner(address):(bool)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBoolean();
  }

  try_isBurner(account: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isBurner", "isBurner(address):(bool)", [
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isMinter(account: Address): boolean {
    let result = super.call("isMinter", "isMinter(address):(bool)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBoolean();
  }

  try_isMinter(account: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isMinter", "isMinter(address):(bool)", [
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isOwner(account: Address): boolean {
    let result = super.call("isOwner", "isOwner(address):(bool)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBoolean();
  }

  try_isOwner(account: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isOwner", "isOwner(address):(bool)", [
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isPauser(account: Address): boolean {
    let result = super.call("isPauser", "isPauser(address):(bool)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBoolean();
  }

  try_isPauser(account: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isPauser", "isPauser(address):(bool)", [
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isRevoker(account: Address): boolean {
    let result = super.call("isRevoker", "isRevoker(address):(bool)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBoolean();
  }

  try_isRevoker(account: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isRevoker", "isRevoker(address):(bool)", [
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isWhitelistEnabled(): boolean {
    let result = super.call(
      "isWhitelistEnabled",
      "isWhitelistEnabled():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_isWhitelistEnabled(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isWhitelistEnabled",
      "isWhitelistEnabled():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isWhitelister(account: Address): boolean {
    let result = super.call("isWhitelister", "isWhitelister(address):(bool)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBoolean();
  }

  try_isWhitelister(account: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isWhitelister",
      "isWhitelister(address):(bool)",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  messageForTransferRestriction(restrictionCode: i32): string {
    let result = super.call(
      "messageForTransferRestriction",
      "messageForTransferRestriction(uint8):(string)",
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(restrictionCode))]
    );

    return result[0].toString();
  }

  try_messageForTransferRestriction(
    restrictionCode: i32
  ): ethereum.CallResult<string> {
    let result = super.tryCall(
      "messageForTransferRestriction",
      "messageForTransferRestriction(uint8):(string)",
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(restrictionCode))]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  mint(account: Address, amount: BigInt): boolean {
    let result = super.call("mint", "mint(address,uint256):(bool)", [
      ethereum.Value.fromAddress(account),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_mint(account: Address, amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("mint", "mint(address,uint256):(bool)", [
      ethereum.Value.fromAddress(account),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  outboundWhitelistsEnabled(param0: i32, param1: i32): boolean {
    let result = super.call(
      "outboundWhitelistsEnabled",
      "outboundWhitelistsEnabled(uint8,uint8):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(param0)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(param1))
      ]
    );

    return result[0].toBoolean();
  }

  try_outboundWhitelistsEnabled(
    param0: i32,
    param1: i32
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "outboundWhitelistsEnabled",
      "outboundWhitelistsEnabled(uint8,uint8):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(param0)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(param1))
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  paused(): boolean {
    let result = super.call("paused", "paused():(bool)", []);

    return result[0].toBoolean();
  }

  try_paused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("paused", "paused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  proxiableUUID(): Bytes {
    let result = super.call("proxiableUUID", "proxiableUUID():(bytes32)", []);

    return result[0].toBytes();
  }

  try_proxiableUUID(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "proxiableUUID",
      "proxiableUUID():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  revoke(from: Address, amount: BigInt): boolean {
    let result = super.call("revoke", "revoke(address,uint256):(bool)", [
      ethereum.Value.fromAddress(from),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_revoke(from: Address, amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("revoke", "revoke(address,uint256):(bool)", [
      ethereum.Value.fromAddress(from),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transfer(to: Address, value: BigInt): boolean {
    let result = super.call("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(to),
      ethereum.Value.fromUnsignedBigInt(value)
    ]);

    return result[0].toBoolean();
  }

  try_transfer(to: Address, value: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(to),
      ethereum.Value.fromUnsignedBigInt(value)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transferFrom(from: Address, to: Address, value: BigInt): boolean {
    let result = super.call(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(value)
      ]
    );

    return result[0].toBoolean();
  }

  try_transferFrom(
    from: Address,
    to: Address,
    value: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(value)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class AddBurnerCall extends ethereum.Call {
  get inputs(): AddBurnerCall__Inputs {
    return new AddBurnerCall__Inputs(this);
  }

  get outputs(): AddBurnerCall__Outputs {
    return new AddBurnerCall__Outputs(this);
  }
}

export class AddBurnerCall__Inputs {
  _call: AddBurnerCall;

  constructor(call: AddBurnerCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddBurnerCall__Outputs {
  _call: AddBurnerCall;

  constructor(call: AddBurnerCall) {
    this._call = call;
  }
}

export class AddMinterCall extends ethereum.Call {
  get inputs(): AddMinterCall__Inputs {
    return new AddMinterCall__Inputs(this);
  }

  get outputs(): AddMinterCall__Outputs {
    return new AddMinterCall__Outputs(this);
  }
}

export class AddMinterCall__Inputs {
  _call: AddMinterCall;

  constructor(call: AddMinterCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddMinterCall__Outputs {
  _call: AddMinterCall;

  constructor(call: AddMinterCall) {
    this._call = call;
  }
}

export class AddOwnerCall extends ethereum.Call {
  get inputs(): AddOwnerCall__Inputs {
    return new AddOwnerCall__Inputs(this);
  }

  get outputs(): AddOwnerCall__Outputs {
    return new AddOwnerCall__Outputs(this);
  }
}

export class AddOwnerCall__Inputs {
  _call: AddOwnerCall;

  constructor(call: AddOwnerCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddOwnerCall__Outputs {
  _call: AddOwnerCall;

  constructor(call: AddOwnerCall) {
    this._call = call;
  }
}

export class AddPauserCall extends ethereum.Call {
  get inputs(): AddPauserCall__Inputs {
    return new AddPauserCall__Inputs(this);
  }

  get outputs(): AddPauserCall__Outputs {
    return new AddPauserCall__Outputs(this);
  }
}

export class AddPauserCall__Inputs {
  _call: AddPauserCall;

  constructor(call: AddPauserCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddPauserCall__Outputs {
  _call: AddPauserCall;

  constructor(call: AddPauserCall) {
    this._call = call;
  }
}

export class AddRevokerCall extends ethereum.Call {
  get inputs(): AddRevokerCall__Inputs {
    return new AddRevokerCall__Inputs(this);
  }

  get outputs(): AddRevokerCall__Outputs {
    return new AddRevokerCall__Outputs(this);
  }
}

export class AddRevokerCall__Inputs {
  _call: AddRevokerCall;

  constructor(call: AddRevokerCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddRevokerCall__Outputs {
  _call: AddRevokerCall;

  constructor(call: AddRevokerCall) {
    this._call = call;
  }
}

export class AddToWhitelistCall extends ethereum.Call {
  get inputs(): AddToWhitelistCall__Inputs {
    return new AddToWhitelistCall__Inputs(this);
  }

  get outputs(): AddToWhitelistCall__Outputs {
    return new AddToWhitelistCall__Outputs(this);
  }
}

export class AddToWhitelistCall__Inputs {
  _call: AddToWhitelistCall;

  constructor(call: AddToWhitelistCall) {
    this._call = call;
  }

  get addressToAdd(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get whitelist(): i32 {
    return this._call.inputValues[1].value.toI32();
  }
}

export class AddToWhitelistCall__Outputs {
  _call: AddToWhitelistCall;

  constructor(call: AddToWhitelistCall) {
    this._call = call;
  }
}

export class AddWhitelisterCall extends ethereum.Call {
  get inputs(): AddWhitelisterCall__Inputs {
    return new AddWhitelisterCall__Inputs(this);
  }

  get outputs(): AddWhitelisterCall__Outputs {
    return new AddWhitelisterCall__Outputs(this);
  }
}

export class AddWhitelisterCall__Inputs {
  _call: AddWhitelisterCall;

  constructor(call: AddWhitelisterCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddWhitelisterCall__Outputs {
  _call: AddWhitelisterCall;

  constructor(call: AddWhitelisterCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class BurnCall extends ethereum.Call {
  get inputs(): BurnCall__Inputs {
    return new BurnCall__Inputs(this);
  }

  get outputs(): BurnCall__Outputs {
    return new BurnCall__Outputs(this);
  }
}

export class BurnCall__Inputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class BurnCall__Outputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class DecreaseAllowanceCall extends ethereum.Call {
  get inputs(): DecreaseAllowanceCall__Inputs {
    return new DecreaseAllowanceCall__Inputs(this);
  }

  get outputs(): DecreaseAllowanceCall__Outputs {
    return new DecreaseAllowanceCall__Outputs(this);
  }
}

export class DecreaseAllowanceCall__Inputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get subtractedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DecreaseAllowanceCall__Outputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class IncreaseAllowanceCall extends ethereum.Call {
  get inputs(): IncreaseAllowanceCall__Inputs {
    return new IncreaseAllowanceCall__Inputs(this);
  }

  get outputs(): IncreaseAllowanceCall__Outputs {
    return new IncreaseAllowanceCall__Outputs(this);
  }
}

export class IncreaseAllowanceCall__Inputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get addedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class IncreaseAllowanceCall__Outputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get symbol(): string {
    return this._call.inputValues[1].value.toString();
  }

  get decimals(): i32 {
    return this._call.inputValues[2].value.toI32();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class Initialize1Call extends ethereum.Call {
  get inputs(): Initialize1Call__Inputs {
    return new Initialize1Call__Inputs(this);
  }

  get outputs(): Initialize1Call__Outputs {
    return new Initialize1Call__Outputs(this);
  }
}

export class Initialize1Call__Inputs {
  _call: Initialize1Call;

  constructor(call: Initialize1Call) {
    this._call = call;
  }

  get owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get name(): string {
    return this._call.inputValues[1].value.toString();
  }

  get symbol(): string {
    return this._call.inputValues[2].value.toString();
  }

  get decimals(): i32 {
    return this._call.inputValues[3].value.toI32();
  }

  get initialSupply(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get whitelistEnabled(): boolean {
    return this._call.inputValues[5].value.toBoolean();
  }
}

export class Initialize1Call__Outputs {
  _call: Initialize1Call;

  constructor(call: Initialize1Call) {
    this._call = call;
  }
}

export class MintCall extends ethereum.Call {
  get inputs(): MintCall__Inputs {
    return new MintCall__Inputs(this);
  }

  get outputs(): MintCall__Outputs {
    return new MintCall__Outputs(this);
  }
}

export class MintCall__Inputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class MintCall__Outputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class PauseCall extends ethereum.Call {
  get inputs(): PauseCall__Inputs {
    return new PauseCall__Inputs(this);
  }

  get outputs(): PauseCall__Outputs {
    return new PauseCall__Outputs(this);
  }
}

export class PauseCall__Inputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class PauseCall__Outputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class RemoveBurnerCall extends ethereum.Call {
  get inputs(): RemoveBurnerCall__Inputs {
    return new RemoveBurnerCall__Inputs(this);
  }

  get outputs(): RemoveBurnerCall__Outputs {
    return new RemoveBurnerCall__Outputs(this);
  }
}

export class RemoveBurnerCall__Inputs {
  _call: RemoveBurnerCall;

  constructor(call: RemoveBurnerCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemoveBurnerCall__Outputs {
  _call: RemoveBurnerCall;

  constructor(call: RemoveBurnerCall) {
    this._call = call;
  }
}

export class RemoveFromWhitelistCall extends ethereum.Call {
  get inputs(): RemoveFromWhitelistCall__Inputs {
    return new RemoveFromWhitelistCall__Inputs(this);
  }

  get outputs(): RemoveFromWhitelistCall__Outputs {
    return new RemoveFromWhitelistCall__Outputs(this);
  }
}

export class RemoveFromWhitelistCall__Inputs {
  _call: RemoveFromWhitelistCall;

  constructor(call: RemoveFromWhitelistCall) {
    this._call = call;
  }

  get addressToRemove(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemoveFromWhitelistCall__Outputs {
  _call: RemoveFromWhitelistCall;

  constructor(call: RemoveFromWhitelistCall) {
    this._call = call;
  }
}

export class RemoveMinterCall extends ethereum.Call {
  get inputs(): RemoveMinterCall__Inputs {
    return new RemoveMinterCall__Inputs(this);
  }

  get outputs(): RemoveMinterCall__Outputs {
    return new RemoveMinterCall__Outputs(this);
  }
}

export class RemoveMinterCall__Inputs {
  _call: RemoveMinterCall;

  constructor(call: RemoveMinterCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemoveMinterCall__Outputs {
  _call: RemoveMinterCall;

  constructor(call: RemoveMinterCall) {
    this._call = call;
  }
}

export class RemoveOwnerCall extends ethereum.Call {
  get inputs(): RemoveOwnerCall__Inputs {
    return new RemoveOwnerCall__Inputs(this);
  }

  get outputs(): RemoveOwnerCall__Outputs {
    return new RemoveOwnerCall__Outputs(this);
  }
}

export class RemoveOwnerCall__Inputs {
  _call: RemoveOwnerCall;

  constructor(call: RemoveOwnerCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemoveOwnerCall__Outputs {
  _call: RemoveOwnerCall;

  constructor(call: RemoveOwnerCall) {
    this._call = call;
  }
}

export class RemovePauserCall extends ethereum.Call {
  get inputs(): RemovePauserCall__Inputs {
    return new RemovePauserCall__Inputs(this);
  }

  get outputs(): RemovePauserCall__Outputs {
    return new RemovePauserCall__Outputs(this);
  }
}

export class RemovePauserCall__Inputs {
  _call: RemovePauserCall;

  constructor(call: RemovePauserCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemovePauserCall__Outputs {
  _call: RemovePauserCall;

  constructor(call: RemovePauserCall) {
    this._call = call;
  }
}

export class RemoveRevokerCall extends ethereum.Call {
  get inputs(): RemoveRevokerCall__Inputs {
    return new RemoveRevokerCall__Inputs(this);
  }

  get outputs(): RemoveRevokerCall__Outputs {
    return new RemoveRevokerCall__Outputs(this);
  }
}

export class RemoveRevokerCall__Inputs {
  _call: RemoveRevokerCall;

  constructor(call: RemoveRevokerCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemoveRevokerCall__Outputs {
  _call: RemoveRevokerCall;

  constructor(call: RemoveRevokerCall) {
    this._call = call;
  }
}

export class RemoveWhitelisterCall extends ethereum.Call {
  get inputs(): RemoveWhitelisterCall__Inputs {
    return new RemoveWhitelisterCall__Inputs(this);
  }

  get outputs(): RemoveWhitelisterCall__Outputs {
    return new RemoveWhitelisterCall__Outputs(this);
  }
}

export class RemoveWhitelisterCall__Inputs {
  _call: RemoveWhitelisterCall;

  constructor(call: RemoveWhitelisterCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemoveWhitelisterCall__Outputs {
  _call: RemoveWhitelisterCall;

  constructor(call: RemoveWhitelisterCall) {
    this._call = call;
  }
}

export class RevokeCall extends ethereum.Call {
  get inputs(): RevokeCall__Inputs {
    return new RevokeCall__Inputs(this);
  }

  get outputs(): RevokeCall__Outputs {
    return new RevokeCall__Outputs(this);
  }
}

export class RevokeCall__Inputs {
  _call: RevokeCall;

  constructor(call: RevokeCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class RevokeCall__Outputs {
  _call: RevokeCall;

  constructor(call: RevokeCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class SetWhitelistEnabledCall extends ethereum.Call {
  get inputs(): SetWhitelistEnabledCall__Inputs {
    return new SetWhitelistEnabledCall__Inputs(this);
  }

  get outputs(): SetWhitelistEnabledCall__Outputs {
    return new SetWhitelistEnabledCall__Outputs(this);
  }
}

export class SetWhitelistEnabledCall__Inputs {
  _call: SetWhitelistEnabledCall;

  constructor(call: SetWhitelistEnabledCall) {
    this._call = call;
  }

  get enabled(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SetWhitelistEnabledCall__Outputs {
  _call: SetWhitelistEnabledCall;

  constructor(call: SetWhitelistEnabledCall) {
    this._call = call;
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get success(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get success(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class UnpauseCall extends ethereum.Call {
  get inputs(): UnpauseCall__Inputs {
    return new UnpauseCall__Inputs(this);
  }

  get outputs(): UnpauseCall__Outputs {
    return new UnpauseCall__Outputs(this);
  }
}

export class UnpauseCall__Inputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UnpauseCall__Outputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UpdateCodeAddressCall extends ethereum.Call {
  get inputs(): UpdateCodeAddressCall__Inputs {
    return new UpdateCodeAddressCall__Inputs(this);
  }

  get outputs(): UpdateCodeAddressCall__Outputs {
    return new UpdateCodeAddressCall__Outputs(this);
  }
}

export class UpdateCodeAddressCall__Inputs {
  _call: UpdateCodeAddressCall;

  constructor(call: UpdateCodeAddressCall) {
    this._call = call;
  }

  get newAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdateCodeAddressCall__Outputs {
  _call: UpdateCodeAddressCall;

  constructor(call: UpdateCodeAddressCall) {
    this._call = call;
  }
}

export class UpdateOutboundWhitelistEnabledCall extends ethereum.Call {
  get inputs(): UpdateOutboundWhitelistEnabledCall__Inputs {
    return new UpdateOutboundWhitelistEnabledCall__Inputs(this);
  }

  get outputs(): UpdateOutboundWhitelistEnabledCall__Outputs {
    return new UpdateOutboundWhitelistEnabledCall__Outputs(this);
  }
}

export class UpdateOutboundWhitelistEnabledCall__Inputs {
  _call: UpdateOutboundWhitelistEnabledCall;

  constructor(call: UpdateOutboundWhitelistEnabledCall) {
    this._call = call;
  }

  get sourceWhitelist(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get destinationWhitelist(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get newEnabledValue(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }
}

export class UpdateOutboundWhitelistEnabledCall__Outputs {
  _call: UpdateOutboundWhitelistEnabledCall;

  constructor(call: UpdateOutboundWhitelistEnabledCall) {
    this._call = call;
  }
}
